---
title: "copia project"
format: html
editor: visual
---

## APUNTES

INTRODUCCIÓN

In recent years, LEGO sets have evolved from being mere children's toys to highly sought-after investment assets. A study by the Higher School of Economics in Moscow revealed that the value of retired LEGO sets has increased by an average of 11% annually, outperforming many conventional investments since they appreciate in value faster than gold, stocks, or traditional bonds (citar). Factors such as exclusivity, franchise popularity, and set rarity directly influence their resale price, making LEGO an unexpected yet lucrative investment niche.

This project aims to explore the factors driving the revaluation of LEGO sets, analyzing how their prices change over time and identifying which sets offer the greatest return on investment. By examining historical and current market data, we seek to uncover patterns that influence a set’s desirability and long-term worth.

1.  **The official LEGO website**: To obtain the current prices of sets available on the market.

2.  **BrickLink**: A comprehensive online archive that tracks all LEGO sets, their specifications, and their price evolution over time.

The dataset will include essential details such as initial retail price, current market value, percentage appreciation, number of pieces and theme classification.

With the help of statistical analysis and visualizations, we will explore questions such as:

-   Which LEGO sets have appreciated the most over time?

-   Do certain themes, such as *Star Wars* or *Modular Buildings*, have higher investment potential?

-   How do factors like piece count and exclusive minifigures impact resale value?

To obtain and analyze this data, we will implement web scraping techniques using **R** and the **rvest** package, allowing us to track both historical and real-time pricing trends.

Through this research, we aim to uncover patterns that help identify which themes are the most profitable over time, providing valuable insights for both collectors and investors in this emerging market.

```{r}
library(stringr)
library(rvest)
library(tidyverse)
library(tibble)
library(xml2)

disney <- "https://www.lego.com/es-es/themes/disney"

disney <- disney |> 
  read_html()

prices <- disney |> 
  xml_find_all("//div[@class='ProductLeaf_priceRow__RUx3P']") |> 
  html_text() 

prices <- gsub(",", ".", prices)
prices <- str_replace(prices, "\\s?€$", "") |> 
  as.numeric()

prices
```

```{r}
titles <- disney |> 
  xml_find_all("//a[@class='ds-body-md-medium ProductLeaf_title__1UhfJ ']") |> 
  xml_children() |> 
  html_text()

titles
```

```{r}
pieces <- disney |> 
  xml_find_all("//span[@data-test='product-leaf-piece-count-label']")|>
  html_text() |> 
  as.numeric()

pieces
```

```{r}
product <- disney |> 
  xml_find_all("//article[@class='ProductLeaf_wrapper__H0TCb ']") 

product
```

```{r}

extract_lego_data <- function(base_url, max_pages = 4) {
  
  lego_list <- list()  # Lista para almacenar cada página
  
  for (page_num in 1:max_pages) {
    page_url <- paste0(base_url, "?page=", page_num, "&offset=0")
    page <- read_html(page_url)
    
    # Extraer los bloques de cada producto
    product_nodes <- page |> 
    xml_find_all("//article[@class='ProductLeaf_wrapper__H0TCb ']")  # Asegurar que sean los mismos bloques
    
    # Extraer la información dentro de cada bloque
    titles <- product_nodes |> 
      xml_find_first(".//a[contains(@class, 'ProductLeaf_title')]") |> 
      html_text()
    
    prices <- product_nodes |> 
      xml_find_all("//div[@class='ProductLeaf_priceRow__RUx3P']") |> 
      html_text() 
    
    
    # Eliminar comas, espacios y símbolos de euro
    prices <- gsub(",", ".", prices)
    prices <- str_replace(prices, "\\s?€$", "") |> 
      as.numeric()
    
    
    pieces <- product_nodes |> 
      xml_find_first(".//span[@data-test='product-leaf-piece-count-label']") |> 
      html_text() |> 
      as.numeric()
    
    # Crear un dataframe temporal
    lego_page <- tibble(
      Title = titles,
      Price = prices,
      PieceCount = pieces
    )
    
    # Guardar la página en la lista
    lego_list[[page_num]] <- lego_page
    Sys.sleep(2)
  }
  
  # Combinar todas las páginas en un solo data frame
  lego_data <- bind_rows(lego_list)
  
  return(lego_data)
}



```

```{r}
# Disney
url_disney <- "https://www.lego.com/es-es/themes/disney"
lego_disney <- extract_lego_data(url_disney, max_pages = 4) |> 
  mutate("Franchise"= "Disney")
```

```{r}
#Harry Potter
url_harryp <- "https://www.lego.com/es-es/themes/harry-potter"
lego_harryp <- extract_lego_data(url_harryp, max_pages = 4)|> 
  mutate("Franchise"= "Harry Potter")
```

```{r}
#Star Wars
url_starwars <- "https://www.lego.com/es-es/themes/star-wars"
lego_starwars <- extract_lego_data(url_starwars, max_pages = 6)|> 
  mutate("Franchise"= "Star Wars")
```

```{r}
#Super Mario
url_supermario <- "https://www.lego.com/es-es/themes/super-mario"
lego_supermario <- extract_lego_data(url_supermario, max_pages = 2)|> 
  mutate("Franchise"= "Super Mario")
```

```{r}
#Lord of the Rings
url_rings<- "https://www.lego.com/es-es/themes/lord-of-the-rings"
lego_lotr <- extract_lego_data(url_rings, max_pages = 2)|> 
  mutate("Franchise"= "Lord of the Rings")
```

```{r}
#Marvel
url_marvel <- "https://www.lego.com/es-es/themes/marvel"
lego_marvel <- extract_lego_data(url_marvel, max_pages = 4)|> 
  mutate("Franchise"= "Marvel")
```

```{r}
#City
url_city <-"https://www.lego.com/es-es/themes/city"
lego_city <- extract_lego_data(url_city, max_pages = 5)|> 
  mutate("Franchise"= "City")
```

```{r}
# Jurassic World
url_jurassic <- "https://www.lego.com/es-es/themes/jurassic-world"
lego_jurassic <- extract_lego_data(url_jurassic, max_pages = 1) |> 
  mutate("Franchise"= "Jurassic World")
```

Las unimos todas:

```{r}
library(tidyverse)
official_lego <- bind_rows(lego_disney, lego_city, lego_harryp, lego_jurassic, lego_lotr, lego_marvel, lego_starwars, lego_supermario)
```

Eliminamos los NA de piezas ya que no son sets de lego si no otros productos que vende la marca como peluches, boligrafos, libretas.... que no nos interesan para nuestro estudio

```{r}
official_lego <- official_lego |> 
  drop_na (PieceCount)
```

# Web Scraping Process for BrickLink 

We begin the web scraping process for BrickLink, aiming to create a structured dataset containing all the products to be analyzed. Our objective is to extract key variables, including price, release year, and franchise affiliation.

To achieve this, we need to scrape four different hyperlinks within the same website:

-   Main Category Page: The first hyperlink leads to a table listing all LEGO categories available on BrickLink. This includes the franchises we want to compare, such as Star Wars, Super Mario, and others.

-   Category-Specific Product Listings: Clicking on any franchise category takes us to a second hyperlink, which displays all products belonging to that category. This page provides details such as product names, associated LEGO sets, and the number of pieces each product contains.

-   Individual Product Details: By selecting a specific product, we are redirected to a third hyperlink that contains additional information, including the year the product was released. On this page, we also find an option labeled "View Price Guide", which directs us to the final crucial dataset.

-   Price Guide – Current Listings: The fourth hyperlink leads to the "Current Items for Sale: New" table, which is particularly important for our analysis. This table contains real-time market data on new products currently available, including variables such as the total quantity of sales of this product, its average price and its maximum price

To construct our final dataset, we need to sequentially scrape each of these four hyperlinks. We will develop a function that systematically navigates through each of them, extracting relevant data at each stage until we obtain the complete dataset.

## Main Category Page

With these in mind, the first step in this process is to create a table with all categories available in the web and each link that leads to the second hyperlink with the Category-Specific Product Listings. We, then, filter for the specific categories we are interested in:

```{r}
brick <- "https://www.bricklink.com/catalogTree.asp?itemType=S"
brick <- read_html(brick)

# All the links inside the main page
links <- brick |>
  html_nodes("a") |> 
  html_attr("href")

# Links of the main categories
cat_links <- 
  links[grepl("catalogList.asp\\?catType=S&catString=[0-9]+$", links)]

# Names of the main categories
cat_names <- brick |> 
  html_nodes("a b") |> 
  html_text()

cat_links <- paste0("https://www.bricklink.com", cat_links)

# Data.frame with all the info
main_categories <- data.frame(
  category_name = cat_names,
  category_url = cat_links)

```

```{r}
all_products <- main_categories |> 
  filter(category_name %in% c("Town", "Disney", "Harry Potter", 
                              "Jurassic Park", 
                              "The Hobbit and The Lord of the Rings", 
                            "Super Heroes", "Star Wars", "Super Mario"))
```

Then, we get the number of pages that every category has and we add it to the main_categeories table . First we try for one single category (Star Wars in this case) to know which is the procedure to get the number of pages and then we create the function to apply it to the other categories more later:

```{r}
sw_link <- main_categories |> 
  filter(category_name == "Star Wars") |> 
  select(category_url) |> 
  as.character() 

sw <- sw_link |> 
  read_html()

sw_pages <- sw |> 
  html_nodes(xpath ="//div[2]/div[2]/b[3]") |> 
  html_text() |> 
  as.numeric()
sw_pages
```

```{r}
sets_pages <- function(url) {
  link <- read_html(url)
  
  pages <- link |> 
    html_nodes(xpath = "//div[2]/div[2]/b[3]") |> 
    html_text() |> 
    as.numeric()
  
  if (length(pages) == 0 || is.na(pages)) {
    pages <- 1
  }
  
  Sys.sleep(3)
  
  return(pages)
}

main_categories <- all_products |> 
  mutate(n_pages = sapply(category_url, sets_pages))
```

```{r}
#vector con los links
link <- "https://www.bricklink.com/catalogList.asp?catType=S&catString=65" |> 
  read_html()

raw_links <- link |> 
  xml_find_all("//div[@class='container-xl container-body l-pad-y l-margin-bottom catalog-list__body']//a") |> 
  html_attr("href")

# Filtrar solo los que llevan a sets (parecen tener "/v2/catalog/catalogitem.page?S=")
set_links <- raw_links[str_detect(raw_links, "/v2/catalog/catalogitem.page\\?S=")]

base_url <- "https://www.bricklink.com"  
full_links <- paste0(base_url, set_links)
```

```{r}
#vector con los nombres
names <- link |>
  xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//strong") |> html_text() 
  
```

```{r}
year_pieces <- link |> 
  xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//font[@class='fv']") |> 
  html_text()

extract_info <- function(entry) {
  pieces <- str_extract(entry, "\\d+ Parts") %>% str_remove(" Parts")
  set <- str_extract(entry, "(?<=Catalog: Sets:).*")
  
  return(tibble(Pieces = as.integer(pieces), Set = set))
}

```

```{r}
# Función para scrapear productos y extraer información
scrape_products <- function(base_url, total_pages) {
  
  # Crear la URL paginada
  paged_url <- paste0(base_url, "&pg=%d&v=1")  # Agrega paginación
  
  # Inicializar vectores vacíos
  all_names <- c()
  all_links <- c()
  all_pieces <- c()
  all_sets <- c()
  
  # Recorrer todas las páginas
  for (page in 1:total_pages) {
    
    # Determinar la URL de la página actual
    if (page == 1) {
      page_url <- base_url  # Primera página usa la URL base
    } else {
      page_url <- sprintf(paged_url, page)  # Otras páginas usan la URL paginada
    }
    
    # Leer la página web
    link <- read_html(page_url)
    
    # Extraer los links de los sets
    raw_links <- link |> 
      xml_find_all("//div[@class='container-xl container-body l-pad-y l-margin-bottom catalog-list__body']//a") |> 
      html_attr("href")
    
    set_links <- raw_links[str_detect(raw_links, "/v2/catalog/catalogitem.page\\?S=")]
    full_links <- paste0("https://www.bricklink.com", set_links)
    
    # Extraer los nombres
    names <- link |> 
      xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//strong") |> 
      html_text()
    
    # Extraer información adicional (piezas, año, título limpio)
    raw_data <- link |> 
      xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//font[@class='fv']") |> 
      html_text()
    
    cleaned_data <- map_dfr(raw_data, extract_info)
    
    # Guardar en vectores
    all_names <- c(all_names, names)
    all_links <- c(all_links, full_links)
    all_pieces <- c(all_pieces, cleaned_data$Pieces)
    all_sets <- c(all_sets, cleaned_data$Set)
  }
  Sys.sleep(1)
  
  # Crear el dataframe final
  tibble(Name = all_names, Link = all_links, Pieces = all_pieces, Set = all_sets)
}

# USO: Scrapear Star Wars (solo cambiando la URL)
brick_starwars <- scrape_products("https://www.bricklink.com/catalogList.asp?catType=S&catString=65", total_pages = 20)
```

```{r}
all_products <- main_categories |> 
  mutate(product_data = pmap(list(category_url, n_pages), scrape_products)) |> 
  unnest(cols = c(product_data)) |> 
  select(-c(category_url, n_pages))
```

Ahora necesitamos hacer un bucle que recorra todas las paginas de starwars ya que hay 20, y esto solo corre la primera de todas y por lo tanto solo los 50 primeros productos:

Ya tenemos los 974 productos de la francicia de StarWars. Ahora hay que normalizarlo de todos los links que seria coger el link de la franquicia y cambiarlo en scrape_products, y cambiar tambien manualmente el numero de paginas que tenga. Lo probamos con Harry Potter:

Lo que hay que intentar luego es automatizar todo el proceso que de la primera pagina de links haga el segundo proceso y el tercero y asi sabes??? pero bueno lo intentamos al final.

Ahora intentamos acceder al link de el historial de precios a partir de un producto en concreto(cogido de la lista de links anteriores), en este caso TIE Fighter - Mini polybag de la franquicia Star Wars:

```{r}
link_producto <- "https://www.bricklink.com/v2/catalog/catalogitem.page?S=3219-1#T=S&O={%22iconly%22:0}" |> 
  read_html()
```

```{r}
link_producto |> 
  xml_find_all("//a[@class='links']") |> 
  html_text() |> 
  head(1)

```

aquí se accede al price guide:

```{r}
link_producto |> 
      xml_find_all("//div[@id='_idPriceGuideLink']//a") |> 
      html_attr("href")
```

oye yo no entiendo porque me esta saliendo todo tan bien la vida es maravillosa

Ahora dentro del historial de precios del producto necesitamos substraer la tabla Current Items for Sale: New (no??? es ese el que queremos verdad) lo que este en concreto esta en ROL y no se que divisa es esa la vd:

```{r}
link_historial <- "https://www.bricklink.com/catalogPG.asp?S=3219-1&ColorID=0" |> 
  read_html()


link_historial |> 
  xml_find_all("//table[@class='fv']//td[@valign='TOP']") |> 
  html_text()

current_items <- link_historial |> 
  xml_find_all("(//table[@class='fv']//td[@valign='TOP'])[3]") |> #si luego cambiamos de opinion y queremos coger otra tabla como used, last month sales o lo que sea cambiamos el numero 3 y ya esta, ahora solo he cogido la tabla: Current Items for Sale: New
  html_text()

current_items
```

Ahora la limpiamos:

```{r}
# Extraer títulos y valores
titles <- unlist(str_extract_all(current_items, "[A-Za-z ]+(?=:)"))
values <- unlist(str_extract_all(current_items, "(?<=:)\\s*[A-Z]*\\s*[0-9.,]+"))

# Extraer la divisa (asumiendo que todas las filas tienen la misma)
currency <- unique(na.omit(str_extract(values, "^[A-Z]+")))[1]

# Extraer los valores numéricos
numeric_values <- str_extract(values, "[0-9,.]+")

# Crear un tibble con títulos como nombres de columna y una sola columna para la divisa
final_result <- tibble(!!!set_names(numeric_values, titles)) %>%
  mutate(Currency = currency)  # Agregar columna única para la divisa


final_result

```

!!! desempaqueta el vector nombrado en columnas. set_names(...) asigna nombres de variable. mutate(...) agrega la moneda en una columna separada.
