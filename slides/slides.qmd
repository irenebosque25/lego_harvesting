---
title: "LEGO: Play or Invest?"
subtitle: "Data Harvesting 2025"
author: "Pablo AÃ­sa and Irene Bosque"
format: 
  revealjs: 
    theme: custom.css
    transition: slide
editor: visual
---

```{r, warning FALSE, echo = FALSE}
# Libraries
library(rvest)
library(xml2)
library(httr)
library(stringr)
library(tidyverse)
library(tibble)
library(readr)
library(janitor)
library(shiny)
library(plotly)
```

```{r, echo = FALSE}
brick <- read_csv("../data/final_brick.csv")
lego <- read_csv("../data/lego_official.csv")
```

------------------------------------------------------------------------

## The project

Scraping two webs: <span style="font-size: 40%;">

-   LEGO official [webpage](https://www.lego.com/es-es) (Spain)

-   [Bricklink](https://www.bricklink.com/catalogTree.asp?itemType=S):

    -   Four Different Hyperlinks

</span>

------------------------------------------------------------------------

Categories:

::: {style="float: right; width: 75%;"}
<img src="images/bricklink first hyperlink.png" width="100%"/>
:::

------------------------------------------------------------------------

All products:

::: {style="float: right; width: 75%;"}
<img src="images/bricklink hyperlink2.png" width="100%"/>
:::

------------------------------------------------------------------------

One single product:

::: {style="float: right; width: 75%;"}
<img src="images/bricklink hyperlink3.png" width="100%"/>
:::

------------------------------------------------------------------------

Price table:

::: {style="float: right; width: 75%;"}
<img src="images/bricklink hyperlink 4.png" width="100%"/>
:::

------------------------------------------------------------------------

##  {.center .large}

# Scrapping process

------------------------------------------------------------------------

## First steps

We succeded without big issues scraping all of the first three hyperlinks: - Table with all products, pieces, years, sets and the link that lead us to the product prices

::: {style="text-align: center;"}
<img src="images/easy scrap.png" width="200%"/>
:::

------------------------------------------------------------------------

## First Problems: blocks

::: {style="text-align: center;"}
![](images/block.jpg)
:::

------------------------------------------------------------------------

## Solution: reinforced security measures

First, to avoid detection, the code randomizes the User-Agent with each request.

```{r, eval = FALSE, echo = TRUE}
# User-agents to rotate and not being blocked
user_agents <- c(
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0")
```

------------------------------------------------------------------------

Additionally, the script adds custom headers, including Accept-Language and Referer

```{r, eval = FALSE, echo = TRUE}
 headers <- add_headers(
    "User-Agent" = random_user_agent,
    "Accept-Language" = "en-US,en;q=0.9", # simulate a real browser
    "Referer" = "https://google.com"
    )
```

------------------------------------------------------------------------

To further increase stealth, sessions and cookies are handled using html_session().

```{r, eval = FALSE, echo = TRUE}
 session <- tryCatch(html_session(price_link, headers), 
                      error = function(e) return(NULL))
  if (is.null(session)) {
    print("Error logging in. Probably blocked.")
    return(tibble(Times_Sold = NA, Total_Qty = NA, Min_Price = NA, 
                  Avg_Price = NA, Qty_Avg_Price = NA, Max_Price = NA))
  }
  price_history_page <- tryCatch(read_html(session), 
                                 error = function(e) return(NULL))
  if (is.null(price_history_page)) { # read the html
    print("Page blocked or CAPTCHA detected")
    writeLines(as.character(session), "error_page.html")
    return(tibble(Times_Sold = NA, Total_Qty = NA, Min_Price = NA, 
                  Avg_Price = NA, Qty_Avg_Price = NA, Max_Price = NA))
```

------------------------------------------------------------------------

Finally, randomized delays between requests help avoid bot detection.

```{r, eval = FALSE, echo = TRUE}
  counter <<- counter + 1 # product count
  if (counter %% 7 == 0) {
    pause_time <- runif(1, min = 20, max = 30) # longer pause every 7
  } else {
    pause_time <- runif(1, min = 10, max = 15) # normal pause
  }
  print(paste("Waiting", 
              round(pause_time, 2), "seconds before the next request..."))
  Sys.sleep(pause_time)
  return(data)
```

------------------------------------------------------------------------

## Final function

```{r, eval = FALSE, echo = TRUE}
# User-agents to rotate and not being blocked
user_agents <- c(
  "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
  "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
  "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Firefox/89.0")

counter <- 0 # To count the number of products and then do a larger pause each 7 products scrapped

history_data <- function(price_link) {
  random_user_agent <- sample(user_agents, 1) # random user
  
  headers <- add_headers(
    "User-Agent" = random_user_agent,
    "Accept-Language" = "en-US,en;q=0.9", # simulate a real browser
    "Referer" = "https://google.com"
    )
  # create a log in with cookier and user-agent
  session <- tryCatch(html_session(price_link, headers), 
                      error = function(e) return(NULL))
  if (is.null(session)) {
    print("Error logging in. Probably blocked.")
    return(tibble(Times_Sold = NA, Total_Qty = NA, Min_Price = NA, 
                  Avg_Price = NA, Qty_Avg_Price = NA, Max_Price = NA))
  }
  price_history_page <- tryCatch(read_html(session), 
                                 error = function(e) return(NULL))
  if (is.null(price_history_page)) { # read the html
    print("Page blocked or CAPTCHA detected")
    writeLines(as.character(session), "error_page.html")
    return(tibble(Times_Sold = NA, Total_Qty = NA, Min_Price = NA, 
                  Avg_Price = NA, Qty_Avg_Price = NA, Max_Price = NA))
  }
  # Data from Xpaths
  data <- tibble(
    Times_Sold = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[1]//td[2]/b") %>%
      html_text(trim = TRUE),
    
    Total_Qty = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[2]//td[2]/b") %>%
      html_text(trim = TRUE),
    
    Min_Price = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[3]/td[2]/b") %>%
      html_text(trim = TRUE),
    
    Avg_Price = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[4]//td[2]/b") %>%
      html_text(trim = TRUE),
    
    Qty_Avg_Price = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[5]//td[2]/b") %>%
      html_text(trim = TRUE),
    
    Max_Price = price_history_page %>%
      xml_find_first("//table[@class='fv']//tr[6]//td[2]/b") %>%
      html_text(trim = TRUE))
  
  counter <<- counter + 1 # product count
  if (counter %% 7 == 0) {
    pause_time <- runif(1, min = 20, max = 30) # longer pause every 7
  } else {
    pause_time <- runif(1, min = 10, max = 15) # normal pause
  }
  print(paste("Waiting", 
              round(pause_time, 2), "seconds before the next request..."))
  Sys.sleep(pause_time)
  return(data)
}
```

------------------------------------------------------------------------

While at first, it seemed to work correctly, when we expanded the process to 50 products, the issue reappeared:

::: {style="text-align: center;"}
<img src="images/NA table.png" width="200%"/>
:::

------------------------------------------------------------------------

## Final solution

For each category, we selected the 15 products with the highest quantity available while also ensuring that they were from before 2020.

```{r, eval = FALSE, echo = TRUE}
pieces_category <- all_products |> 
  filter(year <= 2020) |> 
  group_by(category_name) |>         
  slice_max(order_by = Pieces, n = 15, with_ties = FALSE) %>% 
  ungroup()
```

------------------------------------------------------------------------

Once we have the 15 products we applied the function to each category selected with the help of a VPN. In order to get the 15 products of each category we had to change the country each time we execute the code

```{r, eval = FALSE, echo = TRUE}
# Harry Potter: Rome, Italy
products_hp <- pieces_category |> 
  filter(category_name == "Harry Potter") |> 
  mutate(history_data = map(price_link, history_data)) 

products1 <- products_hp |> 
  unnest(history_data)

# Disney: Frankfurt, Germany
products_dis <- pieces_category |> 
  filter(category_name == "Disney") |> 
  mutate(history_data = map(price_link, history_data)) 

products2 <- products_dis |> 
  unnest(history_data)

# Star Wars: Paris, France
products_sw <- pieces_category |> 
  filter(category_name == "Star Wars") |> 
  mutate(history_data = map(price_link, history_data)) 

products3 <- products_sw |> 
  unnest(history_data)

# LOTR: Dublin, Ireland
products_lotr <- pieces_category |> 
  filter(category_name == "The Hobbit and The Lord of the Rings") |> 
  mutate(history_data = map(price_link, history_data)) 

products4 <- products_lotr |> 
  unnest(history_data)

# Town: London, UK
products_town <- pieces_category |> 
  filter(category_name == "Town") |> 
  mutate(history_data = map(price_link, history_data)) 

products5 <- products_town |> 
  unnest(history_data)

# Super Mario: Praga, Czech Republic
products_sm <- pieces_category |> 
  filter(category_name == "Super Mario") |> 
  mutate(history_data = map(price_link, history_data)) 

products6 <- products_sm |> 
  unnest(history_data)

# Super Heroes (Marvel & DC): Milan, Italy
products_sh <- pieces_category |> 
  filter(category_name == "Super Heroes") |> 
  mutate(history_data = map(price_link, history_data)) 

products7 <- products_sh |> 
  unnest(history_data)
```

------------------------------------------------------------------------

Finally we merge everything into one single dataset

```{r, eval = FALSE, echo = TRUE}
final_products <- bind_rows(products1, products2, products3, products4, 
                         products5, products6, products7)

final_products <- final_products |> 
  clean_names()
```

------------------------------------------------------------------------

## Final output

::: {style="text-align: center;"}
<img src="images/lego_harvesting.jpg" width="200%"/>
:::

------------------------------------------------------------------------

##  {.center .large}

# Data visualizations

```{r, echo=FALSE}
# Pre-processing
brick <- brick |> 
  mutate(avg_price = as.numeric(avg_price),
            pieces = as.numeric(pieces))

lego <- lego |> 
  mutate(Price = as.numeric(Price),
         PieceCount = as.numeric(PieceCount)) |> 
  clean_names()
```

```{r, echo=FALSE}
category_colors <- c(
  "Star Wars" = "black",
  "Super Mario" = "#D62728",
  "Harry Potter" = "#FF7F0E",
  "Town" = "#7F7F7F",
  "The Hobbit and The Lord of the Rings" = "#2CA02C",
  "Super Heroes" = "#3182BD", 
  "Disney" = "#9467BD")

theme_custom <- theme_minimal() +
  theme(
    axis.text.x = element_text(size=10, face="bold", color="gray20"),
    axis.text.y = element_text(size=10, face="bold", color="gray20"),
    axis.title = element_text(size=12, face="bold"),
    plot.title = element_text(size=14, face="bold", hjust=0.5),
    panel.grid.major = element_line(color="gray85"),
    panel.grid.minor = element_blank(),
    legend.position = "right"
    )
```

------------------------------------------------------------------------

### Evolution of pieces per category

```{r}
p1 <- ggplot(brick, aes(x = year, y = pieces, color = category_name, 
                        group = category_name)) +
  geom_line(linewidth = 0.85) +  # Lines grouped by category
  geom_point() +
  xlim(2000, 2020) +
  labs(title = "Evolution of pieces per category",
       x = "Year",
       y = "Number of pieces",
       color = "Category:") +
  scale_color_manual(values = category_colors) +
  theme_classic() +
  theme(
    legend.position = "top",
    axis.title = element_text(size=10, face = "bold"),
    title = element_text(size=14, face = "bold"),
    legend.text = element_text(size = 8),
    legend.title = element_text(size = 10, face = "bold"),
    legend.background = element_rect(color = "black", size = 0.5))

p1
```

------------------------------------------------------------------------

```{r, echo=FALSE}
lego <- lego |> 
    mutate(franchise = case_when(
      franchise == "City" ~ "Town",
      franchise == "Lord of the Rings" ~ 
           "The Hobbit and The Lord of the Rings",
      franchise == "Marvel" ~ "Super Heroes",
         TRUE ~ franchise
       ))|> 
      rename(category_name = franchise)

bins <- c(0, 500, 1000, 2000, 3000, 5000, 10000)

labels <- c("0-500", "501-1000", "1001-2000", "2001-3000", "3001-5000", "5001+")

brick$piece_category <- cut(brick$pieces, 
                                  breaks = bins, 
                                  labels = labels, right = TRUE)
lego$piece_category <- cut(lego$piece_count, 
                                    breaks = bins, 
                                    labels = labels, right = TRUE)

resales <- brick |> 
     group_by(category_name, piece_category) |> 
     summarise(
         Avg_Resale_Price = mean(avg_price, na.rm = TRUE),
         Avg_Min_Resale_Price = mean(min_price, na.rm = TRUE),
         Avg_Max_Resale_Price = mean(max_price, na.rm = TRUE))

actual_prices <- lego |> 
  group_by(piece_category, category_name) |> 
  summarise(Avg_Current_Price = mean(price, na.rm = TRUE))

comparison_pieces <- left_join(resales, actual_prices, 
                               by = c("piece_category", "category_name"))
```

### Distribution of Resale Prices

::: panel-tabset
#### Avg Price

```{r, echo=FALSE}
p4 <- ggplot(comparison_pieces, 
             aes(x=reorder(category_name, Avg_Resale_Price, FUN=median),
                 y=Avg_Resale_Price)) +
     geom_boxplot(fill="red3", color="black", outlier.colour="yellow",
                  outlier.size=2) +
     scale_x_discrete(labels = c(
         "The Hobbit and The Lord of the Rings" = "LOTR"
       )) +
     labs(title="Distribution of Resale Prices - Avg Price",
                   x="Franchise", y="Price of resale (â¬)") +
     theme_custom

p4
```

------------------------------------------------------------------------

#### Max Price

```{r}
p2 <- ggplot(comparison_pieces, 
             aes(x=reorder(category_name, Avg_Max_Resale_Price, FUN=median),
                 y=Avg_Max_Resale_Price)) +
     geom_boxplot(fill="red3", color="black", outlier.colour="yellow",
                  outlier.size=2) +
     scale_x_discrete(labels = c(
         "The Hobbit and The Lord of the Rings" = "LOTR"
       )) +
     labs(title="Distribution of Resale Prices - Max Price",
                 x="Franchise", y="Price of resale (â¬)") +
     theme_custom

p2
```

------------------------------------------------------------------------

#### Min Price

```{r}
p3 <- ggplot(comparison_pieces, 
             aes(x=reorder(category_name, Avg_Min_Resale_Price, FUN=median),
                 y=Avg_Min_Resale_Price)) +
     geom_boxplot(fill="red3", color="black", outlier.colour="yellow",
                  outlier.size=2) +
     scale_x_discrete(labels = c(
         "The Hobbit and The Lord of the Rings" = "LOTR"
       )) +
     labs(title="Distribution of Resale Prices - Min Price",
                   x="Franchise", y="Price of resale (â¬)") +
     theme_custom

p3
```
:::

------------------------------------------------------------------------

### Investment

```{r}
comparison_pieces$ROI <- ((comparison_pieces$Avg_Resale_Price -
                             comparison_pieces$Avg_Current_Price)/ 
                            comparison_pieces$Avg_Current_Price)*100

df_sorted <- comparison_pieces |> 
  drop_na(ROI) |>
  group_by(category_name) |> 
  summarise(ROI = mean(ROI)) |> 
  arrange(desc(ROI)) |>
  filter(!category_name =="The Hobbit and The Lord of the Rings")

p5 <- ggplot(df_sorted, 
             aes(x=reorder(category_name, ROI), y=ROI, fill=ROI)) +
  geom_bar(stat="identity", width=0.6, color="black") +
  scale_fill_gradient(low="yellow", high="red4") +
  scale_y_continuous(limits = c(0, 130)) +
  labs(title="Profitability (ROI) of LEGO by franchise",
       subtitle="Comparing the actual and resale products by pieces",
       x="Franchise", y="ROI (%)") +
  coord_flip() +  # Graph flipped
  geom_text(aes(label=sprintf("%.1f%%", ROI)), 
            hjust=-0.2, size=4.5, fontface="bold") +
  theme_custom

p5
```

------------------------------------------------------------------------

::: {style="display: flex; justify-content: center; align-items: center; height: 120vh"}
<iframe src="https://ireneandpablo.shinyapps.io/shiny_app/" width="900" height="450" style="border: none;">

</iframe>
:::
