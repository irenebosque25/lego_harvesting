---
title: "DATA HARVESTING PROJECT"
author: Irene Bosque and Pablo Aísa
format: html
editor: visual
---

## INTRODUCTION

In recent years, LEGO sets have evolved from being mere children's toys to highly sought-after investment assets. A study by the Higher School of Economics in Moscow revealed that the value of retired LEGO sets has increased by an average of 11% annually, outperforming many conventional investments since they appreciate in value faster than gold, stocks, or traditional bonds (citar). Factors such as exclusivity, franchise popularity, and set rarity directly influence their resale price, making LEGO an unexpected yet lucrative investment niche.

This project aims to explore the factors driving the revaluation of LEGO sets, analyzing how their prices change over time and identifying which sets offer the greatest return on investment. By examining historical and current market data, we seek to uncover patterns that influence a set’s desirability and long-term worth.

1.  **The official LEGO website**: To obtain the current prices of sets available on the market.

2.  **BrickLink**: A comprehensive online archive that tracks all LEGO sets, their specifications, and their price evolution over time.

The dataset will include essential details such as initial retail price, current market value, percentage appreciation, number of pieces and theme classification.

With the help of statistical analysis and visualizations, we will explore questions such as:

-   Which LEGO sets have appreciated the most over time?

-   Do certain themes, such as *Star Wars* or *Modular Buildings*, have higher investment potential?

-   How do factors like piece count and exclusive minifigures impact resale value?

To obtain and analyze this data, we will implement web scraping techniques using **R** and the **rvest** package, allowing us to track both historical and real-time pricing trends.

Through this research, we aim to uncover patterns that help identify which themes are the most profitable over time, providing valuable insights for both collectors and investors in this emerging market.

### Libraries

```{r}
library(rvest)
library(xml2)
library(httr)
library(stringr)
library(tidyverse)
library(tibble)
```

## Bricklink

We begin the web scraping process for *BrickLink*, aiming to create a structured dataset containing all the products to be analyzed. Our objective is to extract key variables, including price, release year, and franchise affiliation.

To achieve this, we need to scrape four different hyperlinks within the same website:

-   **Main Category Page:** The first hyperlink leads to a table listing all LEGO categories available on BrickLink. This includes the franchises we want to compare, such as Star Wars and Super Mario.

-   **Category-Specific Product Listings:** Clicking on any franchise category takes us to a second hyperlink, which displays all products belonging to that category. This page provides details such as product names, associated LEGO sets, and the number of pieces each product contains.

-   **Individual Product Details:** By selecting a specific product, we are redirected to a third hyperlink that contains additional information, including the year the product was released. On this page, we also find an option labeled "View Price Guide", which directs us to the final crucial dataset.

-   **Price Guide – Current Listings:** The fourth hyperlink leads to the "Current Items for Sale: New" table, which is particularly important for our analysis. This table contains real-time market data on new products currently available, including variables such as the total quantity of sales of this product, its average price and its maximum price

We need to sequentially scrape each of these four hyperlinks to construct our final dataset. We will develop a function that systematically navigates through each of them, extracting relevant data at each stage until we obtain the complete dataset.

### Categories selected

With these in mind, the first step in this process is to create a table with all categories available in the web and each link that leads to the second hyperlink with the Category-Specific Product Listings. We, then, filter for the specific categories we are interested in:

```{r}

brick <- "https://www.bricklink.com/catalogTree.asp?itemType=S"
brick <- read_html(brick)

# All the links inside the main page
links <- brick |>
  html_nodes("a") |> 
  html_attr("href")

# Links of the main categories
cat_links <- 
  links[grepl("catalogList.asp\\?catType=S&catString=[0-9]+$", links)]

# Names of the main categories
cat_names <- brick |> 
  html_nodes("a b") |> 
  html_text()

cat_links <- paste0("https://www.bricklink.com", cat_links)

# Data.frame with all the info
main_categories <- data.frame(
  category_name = cat_names,
  category_url = cat_links)
```

Now we select only the variables that we are interested in. 

```{r}
all_products <- main_categories |> 
  filter(category_name %in% c("Town", "Disney", "Harry Potter", 
                              "Jurassic Park", 
                              "The Hobbit and The Lord of the Rings", 
                            "Super Heroes", "Star Wars", "Super Mario"))
```

Then, we get the number of pages that every category has and we add it to the main_categeories table . First we try for one single category (Star Wars in this case) to know which is the procedure to get the number of pages and then we create the function to apply it to the other categories more later:

```{r}
# First try only with Star Wars sets

sw_link <- main_categories |> 
  filter(category_name == "Star Wars") |> 
  select(category_url) |> 
  as.character() 

sw <- sw_link |> 
  read_html()

sw_pages <- sw |> 
  html_nodes(xpath ="//div[2]/div[2]/b[3]") |> 
  html_text() |> 
  as.numeric()
sw_pages
```

It can be seen that the number of pages indicated for Star Wars is 20, which is correct as this is the number of pages containing objects in this category on the website. The next step is to automate this process and apply it to the rest of the selected categories. 

```{r}
# Function to obtain the number of pages inside each category

sets_pages <- function(url) {
  link <- read_html(url)
  
  pages <- link |> 
    html_nodes(xpath = "//div[2]/div[2]/b[3]") |> 
    html_text() |> 
    as.numeric()
  
  if (length(pages) == 0 || is.na(pages)) {
    pages <- 1
  }
  
  Sys.sleep(3)
  
  return(pages)
}

main_categories <- all_products |> 
  mutate(n_pages = sapply(category_url, sets_pages))
```

### Product data

```{r}

sets_pages <- function(url) {
  link <- read_html(url)
  
  pages <- link |> 
    html_nodes(xpath = "//div[2]/div[2]/b[3]") |> 
    html_text() |> 
    as.numeric()
  
  if (length(pages) == 0 || is.na(pages)) {
    pages <- 1
  }
  
  Sys.sleep(runif(3))
  
  return(pages)
}

main_categories <- main_categories |> 
  mutate(n_pages = sapply(category_url, sets_pages))
```

#### First try products of Star Wars

```{r}
# Link vector

link <- "https://www.bricklink.com/catalogList.asp?catType=S&catString=65" |>
  read_html()

raw_links <- link |> 
  xml_find_all("//div[@class='container-xl container-body l-pad-y l-margin-bottom catalog-list__body']//a") |> 
  html_attr("href")

# Filtrar solo los que llevan a sets (parecen tener "/v2/catalog/catalogitem.page?S=")
set_links <- raw_links[str_detect(raw_links, "/v2/catalog/catalogitem.page\\?S=")]

base_url <- "https://www.bricklink.com"  
full_links <- paste0(base_url, set_links)
```

```{r}
# Names vector
names <- link |>
  xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//strong")|> html_text() 
```

```{r}
year_pieces <- link |> 
  xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//font[@class='fv']") |> 
  html_text()

extract_info <- function(entry) {
  pieces <- str_extract(entry, "\\d+ Parts") %>% 
    str_remove(" Parts")
  set <- str_extract(entry, "(?<=Catalog: Sets:).*")
  
  return(tibble(Pieces = as.integer(pieces), Set = set))
}

```


```{r}
# Function to scrap the products and obtain the info
scrape_products <- function(base_url, total_pages) {
  
  # URL with pages
  paged_url <- paste0(base_url, "&pg=%d&v=1")  # Add more pages
  
  all_names <- c()
  all_links <- c()
  all_pieces <- c()
  all_sets <- c()
  
  for (page in 1:total_pages) {
    
    if (page == 1) {
      page_url <- base_url # First page
    } else {
      page_url <- sprintf(paged_url, page)  # the rest
    }
    
    link <- read_html(page_url)
    
    # Links
    raw_links <- link |> 
      xml_find_all("//div[@class='container-xl container-body l-pad-y l-margin-bottom catalog-list__body']//a") |> 
      html_attr("href")
    
    set_links <- raw_links[str_detect(raw_links, "/v2/catalog/catalogitem.page\\?S=")]
    full_links <- paste0("https://www.bricklink.com", set_links)
    
    # Names
    names <- link |> 
      xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//strong") |> 
      html_text()
    
    # More info
    raw_data <- link |> 
      xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//font[@class='fv']") |> 
      html_text()
    
    cleaned_data <- map_dfr(raw_data, extract_info)
    
    all_names <- c(all_names, names)
    all_links <- c(all_links, full_links)
    all_pieces <- c(all_pieces, cleaned_data$Pieces)
    all_sets <- c(all_sets, cleaned_data$Set)
  }
  Sys.sleep(2)
  
  # Final df
  tibble(Name = all_names, Link = all_links, 
         Pieces = all_pieces, Set = all_sets)
}

# Try with Star Wars
brick_starwars <- scrape_products("https://www.bricklink.com/catalogList.asp?catType=S&catString=65", total_pages = 20)
```



```{r}
# The rest of the categories

all_products <- main_categories |> 
  mutate(product_data = 
           pmap(list(category_url, n_pages), scrape_products)) |> 
  unnest(cols = c(product_data)) |> 
  select(-c(category_url, n_pages))
```

#### Product prices

```{r}
link_product <- "https://www.bricklink.com/v2/catalog/catalogitem.page?S=3219-1#T=S&O={%22iconly%22:0}" |> 
  read_html()

link_product |> 
      xml_find_all("//div[@id='_idPriceGuideLink']//a") |> 
      html_attr("href")

link_historial <- 
  "https://www.bricklink.com/catalogPG.asp?S=3219-1&ColorID=0"|> 
  read_html()

link_historial |> 
  xml_find_all("//table[@class='fv']//td[@valign='TOP']") |> 
  html_text()

current_items <- link_historial |> 
  xml_find_all("(//table[@class='fv']//td[@valign='TOP'])[3]") |> # the number 3 indicates the number of the table that we want. In this case, current items for sale.
  html_text()

current_items
```

```{r}
# Expresión regular para extraer los títulos y los valores
titles <- unlist(str_extract_all(current_items, "[A-Za-z ]+(?=:)"))

# Extraer valores después de los dos puntos
values <- unlist(str_extract_all(current_items, "(?<=:)\\s*[A-Z]*\\s*[0-9.,]+"))


# Crear un tibble con los datos limpios
table_current_items <- tibble(
  Title = str_trim(titles), 
  Value = str_trim(values)   
)

# Separar moneda y número si existe una divisa
table_current_items <- table_current_items %>%
  mutate(Currency = str_extract(Value, "^[A-Z]+"), 
         Value = str_extract(Value, "[0-9,.]+"))  

table_current_items
```

#### Year

```{r}
year_pieces <- link |> 
  xml_find_all("//table[@class='bg-color--white catalog-list__body-main catalog-list__body-main--alternate-row']//font[@class='fv']") |> 
  html_text()

extract_info <- function(entry) {
  pieces <- str_extract(entry, "\\d+ Parts") %>% str_remove(" Parts")
  set <- str_extract(entry, "(?<=Catalog: Sets:).*")
  
  return(tibble(Pieces = as.integer(pieces), Set = set))
}
```
